// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  active
  inactive
}

enum ActionType {
  THUMB_UP
  THUMB_DOWN
  LAUGH
  HOORAY
  CONFUSED
  HEART
  ROCKET
  EYE
  UPVOTE
}

enum ReactionType {
  LIKE
  FAVORITE
}

enum GalleryStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

model User {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  role              Role       @default(USER)
  email             String     @unique
  hash              String
  fullName          String?
  username          String     @unique
  settings          Json?
  status            UserStatus @default(active)
  tokenVersion      Int        @default(0)
  passwordUpdatedAt DateTime   @default(now())

  profile Profile?

  galleries       Gallery[]
  comments        Comment[]
  GalleryReaction GalleryReaction[]

  @@map("users")
}

model Profile {
  id            Int     @id @default(autoincrement())
  configuration Json?
  avatarUrl     String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  galleries GalleryTag[]
}

model GalleryTag {
  galleryId Int
  tagId     Int

  gallery Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([galleryId, tagId])
  @@index([tagId])
}

model GalleryReaction {
  userId    Int
  galleryId Int
  type      ReactionType
  createdAt DateTime     @default(now())

  gallery Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, galleryId, type])
  @@index([galleryId, type])
}

model Gallery {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  createdBy User @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String?
  description String?
  content     Json?
  thumbnail   String?
  status      GalleryStatus @default(DRAFT)

  viewsCount     Int        @default(0)
  likesCount     Int        @default(0)
  favoritesCount Int        @default(0)
  slug           String?    @unique
  publishedAt    DateTime?
  visibility     Visibility @default(PUBLIC)

  comments  Comment[]
  tags      GalleryTag[]
  reactions GalleryReaction[]

  @@index([status, updatedAt])
  @@index([userId, updatedAt])
  @@index([visibility, updatedAt])
  @@map("galleries")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  galleryId Int
  gallery   Gallery @relation(fields: [galleryId], references: [id])

  parentId Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  selectedActions Reaction[]   @relation("CommentSelectedActions")
  actions         ActionCount? @relation("CommentActionCount")
}

model Reaction {
  id        Int        @id @default(autoincrement())
  type      ActionType
  commentId Int
  comment   Comment    @relation("CommentSelectedActions", fields: [commentId], references: [id])
}

model ActionCount {
  commentId Int     @id
  upvote    Int
  rocket    Int
  heart     Int
  thumbUp   Int
  thumbDown Int
  laugh     Int
  hooray    Int
  confused  Int
  eye       Int
  comment   Comment @relation("CommentActionCount", fields: [commentId], references: [id])
}
