// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  active
  inactive
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      Role       @default(USER)
  email     String     @unique
  hash      String
  firstName String?
  lastName  String?
  settings  Json?
  status    UserStatus @default(active)

  profile Profile?

  galleries Gallery[]

  @@map("users")
}

model Profile {
  id            Int  @id @default(autoincrement())
  configuration Json

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Gallery {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  createdBy User @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String?
  description String?
  content     Json?
  thumbnail   String?

  @@map("galleries")
}

// model Image {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   galleryId Int
//   gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

//   file File?

//   @@map("images")
// }

// model File {
//   id          Int      @id @default(autoincrement())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   docHash     String
//   mimeType    String
//   contentSize BigInt
//   version     Int
//   content     Bytes
//   tags        String?
//   keywords    String?

//   imageId Int   @unique
//   image   Image @relation(fields: [imageId], references: [id], onDelete: Cascade)

//   @@map("files")
// }
